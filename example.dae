global {
    # tproxy port to listen.
    tproxy_port: 12345

    # Node connectivity check.
    check_url: 'https://connectivitycheck.gstatic.com/generate_204'
    check_interval: 30s

    # Now only support UDP and IP:Port.
    # Please make sure DNS traffic will go through and be forwarded by dae.
    # The request to dns upstream follows routing defined below.
    dns_upstream: '1.1.1.1:53'

    # The LAN interface to bind. Use it if you only want to proxy LAN instead of localhost.
    # Multiple interfaces split by ",".
    # Require Linux kernel >= 5.2.
    # lan_interface: docker0

    # The WAN interface to bind. Use it if you want to proxy localhost
    # Multiple interfaces split by ","
    # Require Linux kernel >= 5.5
    wan_interface: wlp5s0
}

# Subscriptions defined here will be resolved as nodes and merged as a part of global node pool.
subscription {
    # Add your subscription links here.
}

# Nodes defined here will be merged as a part of global node pool.
node {
    # Add your node links here.
    # Support socks5, http, https, ss, ssr, vmess, vless, trojan, trojan-go
    'socks5://localhost:1080'
    'ss://LINK'
}

group {
    my_group {
        # Filter nodes from global node pool defined by subscription and node section above.
        # Pass node names as input of keyword/regex filter.
        filter: name(regex:'HK|SG|TW', keyword:'JP', keyword: SH) && !name(keyword:"GCP")

        # Randomly select a node from the group for every connection.
        # policy: random

        # Select the node with min last latency from the group for every connection.
        # policy: min

        # Select the first node from the group for every connection.
        policy: fixed(0)
    }

    group2 {
        # Filter nodes from global node pool defined by subscription and node section above.
        # Pass node names as input of keyword/regex filter.
        filter: name(keyword: netflix)

        # Select the node with min average of the last 10 latencies from the group for every connection.
        policy: min_avg10
    }
}

routing {
    # See routing.md for full examples.

    ip(1.1.1.1) && port(53) -> my_group

    pname(firefox) && domain(ip.sb) -> direct
    pname(curl) && domain(ip.sb) -> my_group

    ip(geoip:private) -> direct
    ip(geoip:cn) -> direct
    domain(geosite:cn) -> direct
    final: my_group
}
